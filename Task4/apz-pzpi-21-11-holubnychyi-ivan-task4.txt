1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Програмна система призначена для моніторингу та керування корпоративними холодильниками. 
Вона базується на архітектурі, яка використовує Spring Boot як бекенд фреймворк та REST API для комунікації між компонентами. 
Взаємодія з ресурсами здійснюється за допомогою стандартних HTTP-методів, а дані передаються у форматі JSON. 
Використання REST API забезпечує простоту, легкість розуміння та масштабованість системи.
Серверна частина реалізована на Spring Boot і складається з декількох компонентів:
Контролери: Обробляють HTTP-запити від клієнтів, визначаючи маршрути та викликаючи відповідні сервіси для обробки запитів. 
Вони забезпечують доступ до основної функціональності системи.
Сервіси: Вміщують бізнес-логіку системи, виконують обчислення, валідацію даних та взаємодіють з базою даних через репозиторії. 
Сервіси також відповідають за інтеграцію з зовнішніми API, такими як Stripe API для управління платежами та Delivery API для обробки замовлень.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання описує структуру та взаємозв'язки компонентів програмної системи для організації роботи корпоративних холодильників. 
Вона відображає фізичну архітектуру системи, включаючи розташування апаратних та програмних ресурсів.
Основним фізичним компонентом системи є сервер, на якому відбувається бізнес-логіка та виконуються складні обчислення. 
Сервер виконує функції зберігання, обробки та управління даними, обчислення графіків використання холодильників, перевірку даних про користувачів та холодильники. 
Сервер працює на фреймворку Spring Boot, підтримуючи функціональність програми.
Сервер взаємодіє з базою даних, яка знаходиться на незалежному фізичному пристрої з системою управління базами даних MySQL. 
База даних використовується для зберігання інформації про користувачів, холодильники, їжу та транзакції. 
Архітектурно сервер складається із шарів представлення, бізнес-логіки та доступу до бази даних. 
Сервер додатків надає API за специфікацією REST для забезпечення взаємодії з мобільним додатком, фронтендом та IoT пристроями. 
Дані проходять через сервіси, які їх обробляють, та репозиторії, які зберігають всю інформацію у базі даних. 
Сервер також обробляє запити від клієнтських додатків та забезпечує безпеку даних.
Фронтенд є важливою частиною програмної системи, що забезпечує інтерфейс для взаємодії із системою для адміністраторів холодильників.
Фронтенд розгортається на веб-сервері та доступний через веб-браузер. 
Він використовує фреймворк React, що дозволяє реалізувати графічні елементи для користувача та зв’язок із сервером. 
Шар інтерфейсу відповідає за відображення інтерфейсу користувача, включаючи всі візуальні елементи, такі як кнопки, форми, таблиці та графіки.
Взаємодія між клієнтськими частинами системи та сервером проводиться за допомогою файлів у форматі JSON та протоколу передачі даних HTTP. 
Сервер містить контролери, які приймають всі запити від інших компонентів системи.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина програмної системи організації роботи корпоративних холодильників побудована згідно монолітної архітектури.
Весь додаток побудований як єдиний блок, де всі компоненти, такі як інтерфейс користувача, бізнес-логіка та доступ до даних, розгортаються як один цілісний модуль.
Вибір монолітної архітектури дозволяє швидше розробляти та налаштовувати програму без необхідності керувати різними сервісами.
Серверна частина складається з кількох шарів: представлення, бізнес-логіка, шар доступу до даних та безпека.
Шар представлення містить контролери.
Контролери обробляють HTTP-запити від клієнтських частин, визначаючи шляхи та викликають відповідні сервіси для обробки запитів.
Вони забезпечують точку доступу для взаємодії із системою та містять основну функціональність.
Для кожного типу користувачів передбачений власний контролер, такі як AuthenticationController, BusinessAdminController, DatabaseAdminController, UserController, DeviceController, PaymentController.
Сервіси містять бізнес-логіку системи.
Вони виконують обчислення, валідацію даних та реалізацію об’єктів для комунікації між сервером, обробляючи запити від контролерів.
На цьому рівні відбувається зв’язок із зовнішніми API, такими як Stripe API для управління платежами та Dropbox API для зберігання фотографій користувачів.
Логіка створення резервних копій для бази даних також знаходиться в шарі бізнес-логіки.
Інтерфейси сервісів та об’єкти для транспортування розташовані в шарі "Domain".
Контролери працюють, використовуючи інжекцію залежностей, що дозволяє легко розширювати реалізації та змінювати зовнішні API.
Механізм "Mapper" перетворює сутності до об’єктів передачі даних і навпаки.
Шар доступу до бази даних містить репозиторії та моделі.
Репозиторії взаємодіють з базою даних та моделями, забезпечуючи доступ до даних і виконуючи операції з видалення, редагування, додавання та зберігання даних.
Використовуються Java Persistence API (JPA) та Hibernate для роботи з реляційними базами даних в Java-додатках.
JPA надає стандартний спосіб мапити Java-об'єкти на таблиці бази даних, а Hibernate є потужним фреймворком Object-Relational Mapping (ORM), який надає додаткові можливості.
Шар безпеки містить налаштування для фільтрації користувачів за допомогою Spring Security.
Ця частина також містить файли конфігурації для налаштування роботи та переліку фільтрів, що забезпечують доступ для користувачів лише до певних контролерів.
Реалізований перехоплювач помилок.
Файли фільтрів мають логіку надання дозволу для запиту залежно від його адреси, а також визначають послідовність перевірок для кожного запиту.
Автентифікація відбувається за допомогою токенів JWT, які формує сервер після авторизації в системі.
Авторизація пристрою відбувається за допомогою API ключа, який повинен міститися в запиті.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Предметна область включає три типи користувачів: клієнт або співробітник підприємства, адміністратор бази даних, та адміністратор бізнес-логіки системи. Кожен тип користувача має свої функціональні потреби та взаємодіє з системою відповідно до своєї ролі.
Клієнт або співробітник підприємства є основним типом користувача для цієї системи. Він повинен мати доступ до холодильників та можливість зберігати і використовувати їжу для власних потреб. Система повинна надавати функціональність для обмеження доступу клієнтів до холодильників та можливість використовувати лише певний набір даних пристроїв. Клієнт має доступ до перегляду списку доступних холодильників, вмісту кожного холодильника, переліку власної їжі, історії користувань та списку автозамовлень. Для можливості автозамовлення клієнт може оформити підписку.
Діаграма прецедентів для клієнтів (рис. 1) ілюструє ці функціональні потреби.
Адміністратор бази даних має функціональні потреби, пов'язані з роботою бази даних та забезпеченням цілісності даних. Адміністратор має переглядати всю інформацію, яка зберігається в системі: про холодильники, користувачів, наявні доступи до холодильників, перелік їжі та автозамовлень. Адміністратор може редагувати, видаляти, додавати різні види інформації. Система повинна підтримувати функції резервного копіювання та відновлення даних.
Діаграма прецедентів для адміністратора бази даних (рис. 2) ілюструє ці функціональні потреби.
Адміністратор бізнес-логіки відповідає за контроль різних видів інформації та формування статистик щодо роботи системи. Адміністратор має потребу у формуванні статистик витрат електроенергії кожного холодильника та загальної суми витрат, спираючись на ціну електроенергії.
Діаграма прецедентів для адміністратора бізнес-логіки (рис. 3) ілюструє ці функціональні потреби.
Система повинна також надавати функціональність реєстрації та автентифікації для всіх видів користувачів. Цей функціонал виділений на окремій діаграмі прецедентів (рис. 4).

5 ПОБУДОВА ER-ДІАГРАМИ

Було виділено основні сутності, які відповідають за різні аспекти функціонування системи. Це дозволяє ефективно організувати зберігання та обробку даних, що забезпечує необхідну функціональність.
Основні сутності та їх атрибути:
Користувач: користувач_id, ім’я, прізвище, по-батькові, пароль, електронна пошта, номер телефону, фото, номер трудового договору, тип. Первинний ключ: користувач_id.
Холодильник: холодильник_id, температура, вологість. Первинний ключ: холодильник_id.
Модель: модель_id, назва моделі, бренд, кількість відділень, споживання електроенергії за рік. Первинний ключ: модель_id.
Офіс: офіс_id, країна, місто, район, вулиця, номер будинку, назва компанії. Первинний ключ: офіс_id.
Доступ: доступ_id. Первинний ключ: доступ_id.
Підписка: підписка_id, дата початку, дата кінця, ціна. Первинний ключ: підписка_id.
Їжа: їжа_id, дата придатності, кількість зайнятих відділень, назва. Первинний ключ: їжа_id.
Транзакція: транзакція_id, дата початку, дата кінця. Первинний ключ: транзакція_id.
Продукт: продукт_id, назва, вага. Первинний ключ: продукт_id.
Замовлення: замовлення_id, дата замовлення, кількість. Первинний ключ: замовлення_id.
Зв’язки між сутностями:
"Користувач - Підписка" – тип зв’язку "один до багатьох", оскільки користувач повинен придбати нову підписку після закінчення терміну старої.
"Користувач - Доступ" – тип зв’язку "один до багатьох", оскільки користувач може мати доступ до кількох холодильників.
"Офіс - Холодильник" – тип зв’язку "один до багатьох", оскільки офіс може мати декілька холодильників.
"Модель - Холодильник" – тип зв’язку "один до багатьох", оскільки підприємство може мати багато холодильників однієї моделі.
"Холодильник - Доступ" – тип зв’язку "один до багатьох", оскільки до холодильника можуть мати доступ багато користувачів.
"Доступ - Транзакція" – тип зв’язку "один до багатьох", оскільки без доступу користувач не здійснить транзакцію, і по одному доступу можуть проводитися декілька транзакцій.
"Транзакція - Їжа" – тип зв’язку "один до багатьох", оскільки за одну транзакцію можуть покласти чи забрати багато їжі.
"Доступ - Замовлення" – тип зв’язку "один до багатьох", оскільки одним доступом може бути створено багато замовлень. Замовлення має мати доступ, оскільки там міститься інформація про користувача та холодильник.
"Продукт - Замовлення" – тип зв’язку "один до багатьох", оскільки замовлення може складатися з декількох продуктів.
Дані компоненти дозволяють адміністраторам ефективно взаємодіяти з програмною системою, надаючи їм засоби для моніторингу, аналізу та управління всіма аспектами роботи системи контролю за корпоративними холодильниками.
Спираючись на моделювання предметної області, була побудована ER-діаграма бази даних, яка враховує зберігання інформації для всієї представленої функціональності.

6 СПЕЦИФІКАЦІЯ REST

REST (Representational State Transfer) - архітектурний стиль для розробки сучасних веб-додатків, який базується на стандартах протоколів HTTP. REST підтримує обмін даними між клієнтом і сервером шляхом використання ресурсів, ідентифікованих унікальними URL.
Серверна частина підтримує ресурси доступу до контролера авторизації, користувача, адміністраторів, пристроїв, оплати.
Метод "Увійти в систему" (signIn), доступний по адресі “/authentication/signIn”, приймає дані користувача та відповідає на них JWT-токенами для доступу та оновлення.
Метод "Оновити токен" (refresh), доступний по адресі “/authentication/refresh”, дозволяє оновити токен доступу за допомогою токену оновлення. Це корисно для продовження строку дії токенів без необхідності повторного входу в систему.
Метод "Зареєструвати користувача" (register), доступний по адресі “/authentication/register”, дозволяє створити нового користувача у системі. Він приймає дані про нового користувача, такі як ім'я, електронну пошту та пароль, а також необов'язкове зображення користувача.
Контролер адміністрування бізнесу (див. додаток А, пункт А.2) відповідає за адміністрування різних аспектів корпоративного холодильника. Цей контролер надає доступ до різноманітних статистичних даних та функцій адміністрування.
Метод "Середня тривалість використання холодильника" (averageUsageDuration) доступний за адресою “/businessAdmin/averageUsageDuration” і приймає ідентифікатор холодильника як параметр запиту. Метод повертає статистичні дані щодо середньої тривалості використання холодильника за певний період часу.
Метод "Дохід за період" (incomePeriod) доступний за адресою “/businessAdmin/incomePeriod” і дозволяє отримати звіт про дохід за певний період часу. Він приймає ідентифікатор холодильника та дати початку і кінця періоду як параметри запиту та повертає інформацію про дохід за кожен день протягом вказаного періоду.
Контролер також містить методи для отримання списків користувачів, холодильників, моделей, їжі, транзакцій та замовлень.
Контролер адміністрування бази даних (див. додаток А, пункт А.3) відповідає за ряд функцій адміністрування бази даних.
Метод "Відновлення бази даних" (restore) доступний за адресою “/databaseAdmin/restore”. Він приймає масив байтів як тіло запиту, який містить хеш шляху до резервної копії бази.
Метод "Створення резервної копії бази даних" (backup) доступний за адресою “/databaseAdmin/backup”. Він також приймає масив байтів з хешем шляху до резервної копії як тіло запиту.
Контролер також містить методи для отримання списків користувачів, холодильників, моделей, їжі, транзакцій та замовлень, а також для додавання та видалення об'єктів.
Контролер “Device” (див. додаток А, пункт А.5) відповідає за взаємодію з пристроями.
Метод "Отримати стан холодильника" (getStateOfFridge) доступний за адресою “/device/{fridgeId}/state”. Він приймає ідентифікатор холодильника як параметр у шляху і повертає стан вказаного холодильника.
Метод "Встановити новий стан холодильника" (setNewStateOfFridge) доступний за адресою “/device/{fridgeId}/setState”. Він встановлює новий стан для вказаного холодильника.
Метод "Оновити стан холодильника" (updateStateOfFridge) доступний за адресою “/device/{fridgeId}/updateState”. Він оновлює стан вказаного холодильника на основі наданого запиту.
Контролер також містить методи для початку і зупинки відеопотоку та відправлення електронних листів користувачам.
Контролер “PaymentController” (див. додаток А, пункт А.4) відповідає за операції оплати через Stripe.
Метод "Створити платіжний намір" (createPaymentIntent) доступний за адресою “/payment/buy/card”. Він приймає об'єкт StripeRequest у тілі запиту і повертає інформацію про створений платіжний намір.
Метод "Отримати інформацію про користувача" (getPresentUser) доступний за адресою “/user/account/{email}”. Він приймає адресу електронної пошти користувача та повертає відповідну інформацію про користувача.
Метод "Отримати фото користувача" (getUserPhoto) доступний за адресою “/user/photo/{userId}”. Цей метод отримує ідентифікатор користувача та повертає фото користувача у форматі байтів.
Метод "Видалити користувача" (deleteUser) доступний за адресою “/user/account/{userId}/delete”. Він використовується для видалення облікового запису користувача.
Метод "Зберегти дані користувача" (saveUser) доступний за адресою “/user/account/save”. Він приймає дані користувача та фото у форматі MultipartFile і зберігає їх у системі.
Контролер також містить методи для отримання списку домашніх тварин користувача, історії оренди, списку готелів та номерів, а також для додавання нових оренд та надсилання повідомлень адміністратору.
Доступ до ресурсів визначається за наявності JWT-токенів у запитах. Клієнт повинен передавати коректний токен доступу у заголовку запиту для отримання доступу до захищених ресурсів.
Ця специфікація описує основні ресурси та методи, доступні в програмній системі організації роботи корпоративних холодильників. Вона забезпечує зручний та безпечний спосіб взаємодії з різними компонентами системи через стандартні HTTP-запити та відповіді.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Побудова діаграми компонентів дозволяє візуалізувати архітектуру програмної системи, розділяючи її на окремі компоненти та визначаючи їхні зв'язки. В системі організації роботи корпоративних холодильників виділяються такі основні компоненти: серверна частина, база даних, мобільний застосунок, пристрій (IoT), та фронтенд-частина.
Серверна частина містить кілька логічних компонентів:
Доступ до даних (data): Використовує JDBC для взаємодії з базою даних.
Бізнес-логіка (business logic): Використовує інтерфейси репозиторіїв (IRepo) для доступу до даних та зовнішні компоненти, такі як Stripe API та Dropbox API.
Представлення (presentation): Взаємодіє з бізнес-логікою через інтерфейси сервісів (IService).
Доступ до даних (data): Використовує інтерфейси репозиторіїв для зберігання та отримання даних.
Абстракція (domain): Містить логіку для роботи з даними.
Представлення (presentation): Взаємодіє з бізнес-логікою через інтерфейси сервісів (IMobile).
Фронтенд-частина складається з кількох логічних компонентів:
Components: Використовує інтерфейси компонентів (IComponents) для взаємодії між різними частинами фронтенду.
UI elements: Взаємодіють з компонентами для відображення даних та отримання введення від користувача.

ВИСНОВКИ

Під час виконання лабораторної роботи була розроблена веб частина для програмної системи організації роботи корпоративних холодильників

Додаток А

А.1 Функції авторизації та реєстрації


1	export function validateForm() {
2		let password = document.getElementById("password").value;
3		let email = document.getElementById("username").value;
4
5	if (password.length > 16) {
6	alert("Пароль не може бути більше 16 символів");
7	return false; 8	}
9
10	const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
11	if (!emailRegex.test(email)) {
12	alert("Невірний формат електронної пошти");
13	return false; 14	}
15
16		return true; 17	}
18	export function validateFormRegister() {
19	let firstPassword = document.getElementById("password_r").value;
20	let secondPassword = document.getElementById("passwordAgain_r").value;
21	let name = document.getElementById("name_r").value;
22	let surname = document.getElementById("surname_r").value;
23	let fatherName = document.getElementById("fatherName_r").value;
24	let numberContract = document.getElementById("numberContract_r").value;
25	let email = document.getElementById("username_r").value;
26	const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; 27
28	if (firstPassword !== secondPassword) {
29	alert("Не правильно введені паролі");
30	return false;
31	} else if (name.length > 30 || surname.length >
 
30 || fatherName.length > 30 || numberContract.length >
20) {
32	alert(" Поля: Ім'я, прізвище, по-батькові не більше 30 символів");
33	return false;
34	} else if (!emailRegex.test(email)) {
35	alert("Невірний формат електронної пошти");
36	return false; 37	}
38		return true; 39	}

А.2 Файли «registractionLogic» та «authenticationCheck»

1 @import {validateFormRegister} from '../../pages/utils/RegisterValidation.js'
2
3	export async function register(e) {
4	e.preventDefault();
5	const isValid = validateFormRegister(); 6
7	if (isValid) {
8	try {
9	await sendRequestRegister(); 10
11	} catch (error) {
12		console.error('Помилка при відправці запиту на бекенд:', error);
13	return false; 14	}
15	}
16 }
17
18	async function sendRequestRegister() {
19	let formData = new FormData(); 20
21	console.log(document.getElementById("password_r").value);
22	formData.append('userId', 1);
23	formData.append('name', document.getElementById("name_r").value);
24	formData.append('surname', document.getElementById("surname_r").value);
25	formData.append('patronymic', document.getElementById("fatherName_r").value);
26	formData.append('passwordHash', document.getElementById("password_r").value);
27	formData.append('email', document.getElementById("username_r").value);
 
28	formData.append('numberContract', document.getElementById("numberContract_r").value);
29	formData.append('photo', "");
30	formData.append('phoneNumber', document.getElementById("phoneNumber_r").value);
31	formData.append('type', "REGULAR_USER"); 32
33	let imageFile = document.getElementById("image_r").files[0];
34	formData.append('file', imageFile); 35
36	console.log(formData.values);
37	const response = await fetch('http://localhost:8080/authentication/register', {
38	method: 'POST',
39	body: formData, 40	});
41
42	if (response.ok) {
43	alert('Користувач успішно зареєстрований');
44	} else {
45		console.error('Помилка при реєстрації:', response.statusText);
46	alert("Помилка"); 47	}
48 }
49	import { TOKENS, USER } from '../../pages/utils/GlobalValue.js';
50	import {validateForm} from '../../pages/utils/Validating.js' 51
52
53	export async function signIn(e, history) {
54	e.preventDefault(); 55
56	const isValid = validateForm();
57	if (isValid) {
58	try {
59	const response = await sendRequestsignIn(); 60
61	saveInfoUser(response); 62
63	const responseTypeUser = await sendRequestUser();
64	openCorrectAccount(responseTypeUser, history); 65
66	} catch (error) {
67		console.error('Помилка при відправці запиту на бекенд:', error);
68	return false; 69	}
70	}
71 }
72
 



76




































114	const responseUser = await responseTypeUser.json(); 115
116
117	switch (responseUser.type) {
118	case 'DATABASE_ADMIN':
119	history.push('./mainForm');
120	break;
 

121		case 'REGULAR_USER':
122		history.push('./main');
123		break;
124		
125		default:
126		console.error('Unknown user type:', responseUser.type);
127		break;
128	}	
129		
130		return true;
131	}	

А.3 Файл «FoodUser»

1	@import React, { useState, useEffect } from 'react';
2	import '../../styles/fridges.css';
3	import { v4 as uuidv4 } from 'uuid';
4	import { useTranslation } from 'react-i18next'; 5
6 function FoodUserForm() { 7
8	const { t} = useTranslation(); 9
10	const [food, setFood] = useState([]); 11
12 useEffect(() => { 13
14	/** Call the function that will receive the list of refrigerators from the server
15	and update the state of the component. */
16	fetchFood();
17	}, []); // An empty array means that the effect will be called only after the first rendering.
18
19	const fetchFood = async () => {
20	try {
21	const response = await fetch(`http://localhost:8080/user/food/${localStorage.getItem("email ")}`, {
22	method: 'GET',
23	headers: {
24	'Authorization': `Bearer
${localStorage.getItem("accessToken")}`,
25	'Content-Type': 'application/json', 26	},
27	});
28
29	if (!response.ok) {
30	throw new Error(`HTTP error! Status: ${response.status}`);
 
31	}
32
33	const data = await response.json();
34	setFood(data);
35	} catch (error) {
36	console.error('Error fetching fridges:', error.message); 37	}
38 };
39
40
41	return (
42	<div>
43	<header className="header">
44	<div className="conteiner">
45	<a href="./main" className="logo">
46	<img src="../logo.jpg" alt="logo" /> 47	</a>
48	<a href="./fridges" className="nav">
49	{t('footerUser.fridge')} 50	</a>
51	<a href="./food" className="nav">
52	{t('footerUser.food')} 53	</a>
54	<a href="./history" className="nav">
55	{t('footerUser.history')} 56	</a>
57	<a href="./autoOrder" className="nav">
58	{t('footerUser.autoOrder')} 59	</a>
60	<a href="./subscription" className="nav">
61	{t('footerUser.subscription')} 62	</a>
63	<div className="dropdown">
64	<img src="../menu.png" alt="menu" className = "menu"/>
65	<div className="dropdown-content">
66	<a
href="./settings">{t('footerUser.settings')}</a>
67	<a href="/sign-in">{t('footerUser.exist')}</a>
68	</div>
69	</div>
70	</div>
71	</header> 72
73	<div className="main-content">
74	<div className="fridges-list_l">
75	<h2>{t('footerUser.justFood')}</h2>
76	<ul>
77	{food.map((food) => (
78	<li key={uuidv4()
 
79	}><h3>Name: {food.name}, Number boxes:
{food.number_boxes},
80	Date validity: {food.date_delivery ? food.date_delivery
: 'N/A'},
81	Date transaction: {food.end_date ? food.end_date : 'N/A'},
82	ID of fridge: {food.fridge_access}</h3></li>
83	))}
84	</ul>
85	</div>
86	</div> 87
88	<footer className="footer">
89	<p style={{ fontSize: '20pt' }}>{t('bar.project')}</p>
90	<div className="contact-info">
91	<p>{t('bar.contacts')}</p>
92	<ul>
93	<li>pavlo.kokhanevych@nure.ua</li> 94	</ul>
95	</div>
96	</footer>
97	</div> 98 );
99 }
100
101	export default FoodUserForm;

А.4 Файл «checkoutPayment»


1 @
2	export async function sendSubscription() {
3	try {
4	const currentDate = new Date();
5	const endDate = new Date();
6	endDate.setMonth(endDate.getMonth() + 6); 7
8	const user = await getUser(); 9
10	const subscriptionData = {
11	beginDate: currentDate,
12	endDate: endDate,
13	price: 19,
14	user: user, 15	};
16
17	const response = await fetch("http://localhost:8080/user/addSubscription", {
 
18	method: "POST",
19	headers: {
20	"Content-Type": "application/json",
21	Authorization: `Bearer
${localStorage.getItem("accessToken")}`, 22	},
23		body: JSON.stringify(subscriptionData), 24	});
25
26	if (response.ok) {
27	console.log('Subscription added successfully!');
28	} else {
29	console.error('Failed to add subscription.'); 30	}
31	} catch (error) {
32	console.error('Error:', error); 33	}
34 }
35
36	async function getUser() {
37	try {
38	const response = await fetch(`/user/account/${localStorage.getItem("email")}`, {
39	method: "GET",
40	headers: {
41	Authorization: `Bearer
${localStorage.getItem("accessToken")}`,
42	'Content-Type': 'application/json', 43	},
44	});
45
46	if (response.ok) {
47	const user = await response.json();
48	return user;
49	} else {
50	console.error('Failed to get user ID.');
51	return null; 52	}
53	} catch (error) {
54	console.error('Error:', error);
55	return null; 56	}
57 }
 
А.5 Файл «autoOrderAdd»


1	p
2	export async function addOrder(productList) {
3	try {
4		const orders = productList.map((product) => {
5	return {
6		dateDelivery: new Date(),
7	number: product.count,
8	access: 1,
9	product: {
10	name: product.name,
11	weight:
product.weight, 12	},
13	};
14	});
15
16	await sendOrdersToServer(orders);
17	} catch (error) {
18	console.error('Error placing orders:', error.message);
19	}
20 }
21
22	async function sendOrdersToServer(orders) {
23	try {
24	const response = await fetch('http://localhost:8080/use r/autoOrdering/addOrder', {
25	method: 'POST',
26	headers: {
27	Authorization: `Bearer
${localStorage.getItem("accessTo ken")}`,
28	'Content-Type': 'application/json',
29	},
30	body:
JSON.stringify(orders), 31	});
32
 
33	if (!response.ok) {
34	throw new Error(`HTTP error! Status:
${response.status}`);
35	} else {
36	alert("Успішно додано!");
37	}
38
39	} catch (error) {
40	console.error('Error sending orders to server:', error.message);
41	}
42 }


А.6 Файл «settingsSaver»


1	@	
2	export async function saveChanges(e)	{
3	e.preventDefault();	
4		
5	try {	
6	await sendRequestSave();	
7	} catch (error) {	
8		console.error('Помилка при відправці запиту на бекенд:', error);
9	return false; 10	}
11 }
12
13	async function sendRequestSave() {
14	let passwordHash = document.getElementById("password_s").value;
15	let id = document.getElementById("id_s").value;
16	let name = document.getElementById("name_s").value;
17	let surname = document.getElementById("surname_s").value;
18	let patronymic = document.getElementById("fatherName_s").value;
19	let phoneNumber = document.getElementById("phoneNumber_s").value;
20	let numberContract = document.getElementById("numberContract_s").value;
21	let email = document.getElementById("username_s").value; 22
23	const data = {
24	userId: id,
25	name,
26	surname,
27		patronymic,
28		passwordHash,
29		email,
30		numberContract,
31		phoneNumber,
32		type: "REGULAR_USER"
33	};	
34		
35	const response = await fetch(`http://localhost:8080/user/account/${localStorage.getItem("em ail")}/update`, {
36	method: 'POST',
37	headers: {
38	Authorization: `Bearer
${localStorage.getItem("accessToken")}`,
39	'Content-Type': 'application/json', 40	},
41		body: JSON.stringify(data), 42	});
43
44	if (response.ok) {
45	alert('Зміни прийняті');
46	} else {
47	console.error('Помилка при реєстрації:', response.statusText);
48	alert("Помилка"); 49	}
50 }
51
52	export async function getUser() {
53	try {
54	const response = await fetch(`http://localhost:8080/user/account/${localStorage.getItem("em ail")}`, {
55	method: "GET",
56	headers: {
57	Authorization: `Bearer
${localStorage.getItem("accessToken")}`,
58	'Content-Type': 'application/json', 59	},
60	});
61
62	if (response.ok) {
63	const user = await response.json();
64	return user;
65	} else {
66	console.error('Failed to get user ID.');
67	return null; 68	}
69	} catch (error) {
70		console.error('Error:', error);
71		return null;
72	}	
73 }		
74		
75		
